package parser

import (
	"os"
	"resttracefuzzer/pkg/static"

	"github.com/bytedance/sonic"
	"github.com/rs/zerolog/log"
)

// Types used to parse the JSON file generated by Restler.
// They are not exported and are used only within this package.
//
// pathMap: path -> method -> paramIn -> producer_consumer_details
// Example JSON format:
//
//	{
//		"/api/products/{productId}": {
//	    "GET": {
//	      "Path": [
//	        {
//	          "producer_endpoint": "/api/products",
//	          "producer_method": "GET",
//	          "producer_resource_name": "[0]/id",
//	          "consumer_param": "productId"
//	        }
//	      ],
//	      "Query": [
//	        {
//	          "producer_endpoint": "",
//	          "producer_method": "",
//	          "producer_resource_name": "",
//	          "consumer_param": "currencyCode"
//	        }
//	      ]
//	    }
//	  },
//	  ...
//	}
type pathMap map[string]methodMap
type methodMap map[string]paramInMap
type paramInMap map[string]producerConsumerDetail
type producerConsumerDetail []map[string]string

// APIDependencyRestlerParser represents a parser for API dependencies from Restler.
// It implements the APIDependencyParser interface.
type APIDependencyRestlerParser struct {
}

// NewAPIDependencyRestlerParser creates a new APIDependencyRestlerParser.
func NewAPIDependencyRestlerParser() *APIDependencyRestlerParser {
	return &APIDependencyRestlerParser{}
}

// ParseFromFile parses API dependencies from a given file path.
func (p *APIDependencyRestlerParser) ParseFromFile(path string) (*static.APIDependencyGraph, error) {
	data, err := os.ReadFile(path)
	if err != nil {
		log.Err(err).Msgf("[APIDependencyRestlerParser.ParseFromFile] Error reading file")
		return nil, err
	}

	// Parse the data from the file
	dependencyGraph, err := p.ParseFromBytes(data)
	if err != nil {
		log.Err(err).Msgf("[APIDependencyRestlerParser.ParseFromFile] Error parsing data from file")
		return nil, err
	}
	return dependencyGraph, nil
}

// ParseFromBytes parses the API dependency graph from the given byte slice.
func (p *APIDependencyRestlerParser) ParseFromBytes(data []byte) (*static.APIDependencyGraph, error) {
	var jsonMap pathMap
	if err := sonic.Unmarshal(data, &jsonMap); err != nil {
		log.Err(err).Msgf("[APIDependencyRestlerParser.ParseFromBytes] Error parsing JSON")
		return nil, err
	}

	// Parse the JSON map to create the API dependency graph
	dependencyGraph, err := p.ParseFromFileMap(jsonMap)
	if err != nil {
		log.Err(err).Msgf("[APIDependencyRestlerParser.ParseFromBytes] Error parsing JSON map")
		return nil, err
	}
	log.Debug().Msgf("[APIDependencyRestlerParser.ParseFromBytes] Successfully parsed API dependency graph")
	return dependencyGraph, nil
}

// ParseFromServiceMapFile parses the API dependency graph from the given service map file.
// The file is a JSON file that contains a map of service names to their corresponding API dependencies.
func (p *APIDependencyRestlerParser) ParseFromServiceMapFile(path string) (map[string]*static.APIDependencyGraph, error) {
	data, err := os.ReadFile(path)
	if err != nil {
		log.Err(err).Msgf("[APIDependencyRestlerParser.ParseFromServiceMapFile] Error reading file")
		return nil, err
	}

	serviceMap := make(map[string]pathMap)
	if err := sonic.Unmarshal(data, &serviceMap); err != nil {
		log.Err(err).Msgf("[APIDependencyRestlerParser.ParseFromServiceMapFile] Error parsing JSON")
		return nil, err
	}

	dependencyGraphs := make(map[string]*static.APIDependencyGraph)
	for serviceName, jsonMap := range serviceMap {
		dependencyGraph, err := p.ParseFromFileMap(jsonMap)
		if err != nil {
			log.Err(err).Msgf("[APIDependencyRestlerParser.ParseFromServiceMapFile] Error parsing JSON map for service %s", serviceName)
			return nil, err
		}
		dependencyGraphs[serviceName] = dependencyGraph
	}
	log.Debug().Msgf("[APIDependencyRestlerParser.ParseFromServiceMapFile] Successfully parsed API dependency graphs for all services")
	return dependencyGraphs, nil
}

// ParseFromFileMap parses the API dependency graph from a given path map.
func (p *APIDependencyRestlerParser) ParseFromFileMap(jsonMap pathMap) (*static.APIDependencyGraph, error) {
	dependencyGraph := static.NewAPIDependencyGraph()
	for path, methods := range jsonMap {
		for method, paramInMap := range methods {
			for _, producerConsumerDetails := range paramInMap {
				for _, producerConsumerDetail := range producerConsumerDetails {
					if producerConsumerDetail["producer_endpoint"] == "" {
						continue
					}
					// We assume that all exposed APIs of the system are HTTP APIs
					consumer := static.SimpleAPIMethod{
						Endpoint: path,
						Method:   method,
						Typ:      static.SimpleAPIMethodTypeHTTP,
					}
					producer := static.SimpleAPIMethod{
						Endpoint: producerConsumerDetail["producer_endpoint"],
						Method:   producerConsumerDetail["producer_method"],
						Typ:      static.SimpleAPIMethodTypeHTTP,
					}
					log.Debug().Msgf("[APIDependencyRestlerParser.ParseFromFileMap] Adding dependency from %v to %v", producer, consumer)
					dependencyGraph.AddDependency(consumer, producer)
				}
			}
		}
	}
	return dependencyGraph, nil
}
