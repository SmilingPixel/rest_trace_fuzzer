// Code generated by arg_config_generate.py. DO NOT EDIT.
package config

import "flag"
import "os"
import "github.com/bytedance/sonic"
import "github.com/rs/zerolog/log"

func ParseCmdArgs() {
	flag.StringVar(&GlobalConfig.ConfigFilePath, "config-file", "", "Path to the config file. If a argument is provided in both the config file and command line, the config file argument will be used")
	flag.StringVar(&GlobalConfig.OpenAPISpecPath, "openapi-spec", "", "Path to the OpenAPI spec file")
	flag.StringVar(&GlobalConfig.ServerBaseURL, "server-base-url", "https://www.example.com", "Base URL of the API, e.g., https://www.example.com")
	flag.StringVar(&GlobalConfig.InternalServiceOpenAPIPath, "internal-service-openapi-spec", "", "Path to internal service openapi spec file, json format")
	flag.StringVar(&GlobalConfig.TraceBackendURL, "trace-backend-url", "", "URL of the trace backend")
	flag.StringVar(&GlobalConfig.TraceBackendType, "trace-backend-type", "Jaeger", "Type of the trace backend. Currently only support 'Jaeger'")
	flag.StringVar(&GlobalConfig.DependencyFilePath, "dependency-file", "", "Path to the dependency file generated by other tools or manually")
	flag.StringVar(&GlobalConfig.DependencyFileType, "dependency-file-type", "", "Type of the dependency file. Currently only support 'Restler'")
	flag.StringVar(&GlobalConfig.FuzzerType, "fuzzer-type", "Basic", "Type of the fuzzer. Currently only support 'Basic'")
	flag.DurationVar(&GlobalConfig.FuzzerBudget, "fuzzer-budget", 30, "The maximum time the fuzzer can run, in seconds")
	flag.StringVar(&GlobalConfig.LogLevel, "log-level", "info", "Log level: debug, info, warn, error, fatal, panic")
	flag.StringVar(&GlobalConfig.OutputDir, "output-dir", "./output", "Output directory, e.g., ./output")
	flag.Parse()

	// If config file is provided, load the config from the file
	if GlobalConfig.ConfigFilePath != "" {
		configData, err := os.ReadFile(GlobalConfig.ConfigFilePath)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to read config file: %s", err)
		}
		err = sonic.Unmarshal(configData, GlobalConfig)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse config file: %s", err)
		}
	}

	jsonStr, _ := sonic.Marshal(GlobalConfig)
	log.Info().Msgf("[ParseCmdArgs] Parsed command line arguments: %s", jsonStr)
}
