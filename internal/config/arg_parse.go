// Code generated by arg_config_generate.py. DO NOT EDIT.
package config

import "flag"
import "os"
import "strconv"
import "github.com/bytedance/sonic"
import "github.com/joho/godotenv"
import "github.com/rs/zerolog/log"

func ParseCmdArgs() {
	flag.StringVar(&GlobalConfig.ConfigFilePath, "config-file", "", "Path to the config file. If a argument is provided in both the config file and command line, the config file argument will be used")
	flag.StringVar(&GlobalConfig.DependencyFilePath, "dependency-file", "", "Path to the dependency file generated by other tools or manually")
	flag.StringVar(&GlobalConfig.DependencyFileType, "dependency-file-type", "", "Type of the dependency file. Currently only support 'Restler'. Required if dependency-file is provided.")
	flag.BoolVar(&GlobalConfig.EnableEnergyOperation, "enable-energy-operation", false, "Enable energy (priority) of test operation. If true, energy would affect the test operation selection when extending the test scenario (sequence of test operations).")
	flag.BoolVar(&GlobalConfig.EnableEnergyScenario, "enable-energy-scenario", false, "Enable energy (priority) of test scenario. If true, energy would affect the test scenario selection when starting a new test loop")
	flag.StringVar(&GlobalConfig.ExtraHeaders, "extra-headers", "", "Extra headers to be added to the request, in the format of stringified JSON, e.g., '{\"header1\": \"value1\", \"header2\": \"value2\"}'")
	flag.StringVar(&GlobalConfig.FuzzValueDictFilePath, "fuzz-value-dict-file", "", "Path to the file containing the dictionary of fuzz values, in the format of a JSON list. Each element in the list is a dictionary with two key-value pairs, one is `name` (value is of type string) and the other is `value` (value can be any json).")
	flag.IntVar(&GlobalConfig.FuzzerBudget, "fuzzer-budget", 5, "The maximum time the fuzzer can run, in seconds")
	flag.StringVar(&GlobalConfig.FuzzerType, "fuzzer-type", "Basic", "Type of the fuzzer. Currently only support 'Basic'")
	flag.IntVar(&GlobalConfig.HTTPClientDialTimeout, "http-client-dial-timeout", 30, "Timeout for the HTTP client dial, in seconds. 30 by default.")
	flag.StringVar(&GlobalConfig.HTTPMiddlewareScriptPath, "http-middleware-script", "", "Path to the script file that contains the HTTP middleware functions, see [HTTP Middleware Script](#about-http-middleware-script).")
	flag.StringVar(&GlobalConfig.InternalServiceAPIDependencyFilePath, "internal-service-api-dependency-file", "", "Path to the internal service API dependency file generated by other tools or manually. It should be a map of service name to a list of API dependencies.")
	flag.StringVar(&GlobalConfig.InternalServiceOpenAPIPath, "internal-service-openapi-spec", "", "Path to internal service openapi spec file, json format")
	flag.StringVar(&GlobalConfig.LogLevel, "log-level", "info", "Log level: debug, info (default), warn, error, fatal, panic")
	flag.BoolVar(&GlobalConfig.LogToFile, "log-to-file", false, "Should log to file, false by default.")
	flag.IntVar(&GlobalConfig.MaxOpsPerScenario, "max-ops-per-scenario", 1, "Maximum number of operations to execute in each scenario. It is 1 (i.e., no sequence) by default.")
	flag.IntVar(&GlobalConfig.MaxAllowedOperationCaseExecutedCount, "max-allowed-operation-case-executed-count", 3, "The maximum executed times of a test operation case. It is 3 by default.")
	flag.IntVar(&GlobalConfig.MaxAllowedOperationCases, "max-allowed-operation-cases", 2147483647, "The maximum number of test operation cases in the queue of an API method. No limit by default.")
	flag.IntVar(&GlobalConfig.MaxAllowedScenarioExecutedCount, "max-allowed-scenario-executed-count", 5, "The maximum executed times of a test scenario. It is 5 by default.")
	flag.IntVar(&GlobalConfig.MaxAllowedScenarios, "max-allowed-scenarios", 2147483647, "The maximum number of test scenarios in the queue. No limit by default.")
	flag.StringVar(&GlobalConfig.OpenAPISpecPath, "openapi-spec", "", "Path to the OpenAPI spec file")
	flag.StringVar(&GlobalConfig.OutputDir, "output-dir", "./output", "Output directory, e.g., ./output")
	flag.StringVar(&GlobalConfig.ServerBaseURL, "server-base-url", "https://www.example.com", "Base URL of the API, e.g., https://www.example.com")
	flag.StringVar(&GlobalConfig.TraceBackendType, "trace-backend-type", "Jaeger", "Type of the trace backend. Currently supports 'Jaeger' and 'Tempo'.")
	flag.StringVar(&GlobalConfig.TraceBackendURL, "trace-backend-url", "", "URL of the trace backend")
	flag.IntVar(&GlobalConfig.TraceFetchWaitTime, "trace-fetch-wait-time", 1000, "Time to wait before fetching the trace, as the trace may not be available immediately after the request. The time is in milliseconds.")
	flag.StringVar(&GlobalConfig.TraceIDHeaderKey, "trace-id-header-key", "X-Trace-Id", "The key of the trace ID header to be included in the response. By default, it is 'X-Trace-Id'.")
	flag.BoolVar(&GlobalConfig.UseInternalServiceAPIDependency, "use-internal-service-api-dependency", false, "Indicates whether to use the internal service API dependency. If true, the internal service API dependency will be used to enhance the external service API dependency.")
	flag.IntVar(&GlobalConfig.ValueGenerateMutationWeight, "value-generate-mutation-weight", 0, "The weight used in strategies to generate parameter values by mutation. There is a possibility of value_generate_mutation_weight / sum(value_generate_*) to generate a mutated value. The default value is 0.")
	flag.IntVar(&GlobalConfig.ValueGenerateRandomWeight, "value-generate-random-weight", 0, "The weight used in strategies to generate random parameter values. There is a possibility of value_generate_random_weight / sum(value_generate_*) to generate a random value for the parameter. The default value is 0.")
	flag.IntVar(&GlobalConfig.ValueGenerateResourcePoolWeight, "value-generate-resource-pool-weight", 1, "The weight used in strategies to generate parameter values from the resource pool. There is a possibility of value_generate_resource_pool_weight / sum(value_generate_*) to generate a value from the resource pool. The default value is 1.")
	flag.Parse()

	// If config file is provided, load the config from the file
	if GlobalConfig.ConfigFilePath != "" {
		configData, err := os.ReadFile(GlobalConfig.ConfigFilePath)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to read config file: %s", err)
		}
		err = sonic.Unmarshal(configData, GlobalConfig)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse config file: %s", err)
		}
	}

	// If environment variables are provided, override the config
	err := godotenv.Load()
	if err != nil {
		log.Err(err).Msgf("[ParseCmdArgs] Failed to load environment variables: %s", err)
	}
	if envVal, ok := os.LookupEnv("CONFIG_FILE_PATH"); ok && envVal != "" {
		GlobalConfig.ConfigFilePath = envVal
	}
	if envVal, ok := os.LookupEnv("DEPENDENCY_FILE_PATH"); ok && envVal != "" {
		GlobalConfig.DependencyFilePath = envVal
	}
	if envVal, ok := os.LookupEnv("DEPENDENCY_FILE_TYPE"); ok && envVal != "" {
		GlobalConfig.DependencyFileType = envVal
	}
	if envVal, ok := os.LookupEnv("ENABLE_ENERGY_OPERATION"); ok && envVal != "" {
		GlobalConfig.EnableEnergyOperation = true
	}
	if envVal, ok := os.LookupEnv("ENABLE_ENERGY_SCENARIO"); ok && envVal != "" {
		GlobalConfig.EnableEnergyScenario = true
	}
	if envVal, ok := os.LookupEnv("EXTRA_HEADERS"); ok && envVal != "" {
		GlobalConfig.ExtraHeaders = envVal
	}
	if envVal, ok := os.LookupEnv("FUZZ_VALUE_DICT_FILE_PATH"); ok && envVal != "" {
		GlobalConfig.FuzzValueDictFilePath = envVal
	}
	if envVal, ok := os.LookupEnv("FUZZER_BUDGET"); ok && envVal != "" {
		envValInt, err := strconv.Atoi(envVal)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse int: %s", err)
		}
		GlobalConfig.FuzzerBudget = envValInt
	}
	if envVal, ok := os.LookupEnv("FUZZER_TYPE"); ok && envVal != "" {
		GlobalConfig.FuzzerType = envVal
	}
	if envVal, ok := os.LookupEnv("HTTP_CLIENT_DIAL_TIMEOUT"); ok && envVal != "" {
		envValInt, err := strconv.Atoi(envVal)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse int: %s", err)
		}
		GlobalConfig.HTTPClientDialTimeout = envValInt
	}
	if envVal, ok := os.LookupEnv("HTTP_MIDDLEWARE_SCRIPT_PATH"); ok && envVal != "" {
		GlobalConfig.HTTPMiddlewareScriptPath = envVal
	}
	if envVal, ok := os.LookupEnv("INTERNAL_SERVICE_API_DEPENDENCY_FILE_PATH"); ok && envVal != "" {
		GlobalConfig.InternalServiceAPIDependencyFilePath = envVal
	}
	if envVal, ok := os.LookupEnv("INTERNAL_SERVICE_OPENAPI_PATH"); ok && envVal != "" {
		GlobalConfig.InternalServiceOpenAPIPath = envVal
	}
	if envVal, ok := os.LookupEnv("LOG_LEVEL"); ok && envVal != "" {
		GlobalConfig.LogLevel = envVal
	}
	if envVal, ok := os.LookupEnv("LOG_TO_FILE"); ok && envVal != "" {
		GlobalConfig.LogToFile = true
	}
	if envVal, ok := os.LookupEnv("MAX_OPS_PER_SCENARIO"); ok && envVal != "" {
		envValInt, err := strconv.Atoi(envVal)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse int: %s", err)
		}
		GlobalConfig.MaxOpsPerScenario = envValInt
	}
	if envVal, ok := os.LookupEnv("MAX_ALLOWED_OPERATION_CASE_EXECUTED_COUNT"); ok && envVal != "" {
		envValInt, err := strconv.Atoi(envVal)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse int: %s", err)
		}
		GlobalConfig.MaxAllowedOperationCaseExecutedCount = envValInt
	}
	if envVal, ok := os.LookupEnv("MAX_ALLOWED_OPERATION_CASES"); ok && envVal != "" {
		envValInt, err := strconv.Atoi(envVal)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse int: %s", err)
		}
		GlobalConfig.MaxAllowedOperationCases = envValInt
	}
	if envVal, ok := os.LookupEnv("MAX_ALLOWED_SCENARIO_EXECUTED_COUNT"); ok && envVal != "" {
		envValInt, err := strconv.Atoi(envVal)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse int: %s", err)
		}
		GlobalConfig.MaxAllowedScenarioExecutedCount = envValInt
	}
	if envVal, ok := os.LookupEnv("MAX_ALLOWED_SCENARIOS"); ok && envVal != "" {
		envValInt, err := strconv.Atoi(envVal)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse int: %s", err)
		}
		GlobalConfig.MaxAllowedScenarios = envValInt
	}
	if envVal, ok := os.LookupEnv("OPENAPI_SPEC_PATH"); ok && envVal != "" {
		GlobalConfig.OpenAPISpecPath = envVal
	}
	if envVal, ok := os.LookupEnv("OUTPUT_DIR"); ok && envVal != "" {
		GlobalConfig.OutputDir = envVal
	}
	if envVal, ok := os.LookupEnv("SERVER_BASE_URL"); ok && envVal != "" {
		GlobalConfig.ServerBaseURL = envVal
	}
	if envVal, ok := os.LookupEnv("TRACE_BACKEND_TYPE"); ok && envVal != "" {
		GlobalConfig.TraceBackendType = envVal
	}
	if envVal, ok := os.LookupEnv("TRACE_BACKEND_URL"); ok && envVal != "" {
		GlobalConfig.TraceBackendURL = envVal
	}
	if envVal, ok := os.LookupEnv("TRACE_FETCH_WAIT_TIME"); ok && envVal != "" {
		envValInt, err := strconv.Atoi(envVal)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse int: %s", err)
		}
		GlobalConfig.TraceFetchWaitTime = envValInt
	}
	if envVal, ok := os.LookupEnv("TRACE_ID_HEADER_KEY"); ok && envVal != "" {
		GlobalConfig.TraceIDHeaderKey = envVal
	}
	if envVal, ok := os.LookupEnv("USE_INTERNAL_SERVICE_API_DEPENDENCY"); ok && envVal != "" {
		GlobalConfig.UseInternalServiceAPIDependency = true
	}
	if envVal, ok := os.LookupEnv("VALUE_GENERATE_MUTATION_WEIGHT"); ok && envVal != "" {
		envValInt, err := strconv.Atoi(envVal)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse int: %s", err)
		}
		GlobalConfig.ValueGenerateMutationWeight = envValInt
	}
	if envVal, ok := os.LookupEnv("VALUE_GENERATE_RANDOM_WEIGHT"); ok && envVal != "" {
		envValInt, err := strconv.Atoi(envVal)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse int: %s", err)
		}
		GlobalConfig.ValueGenerateRandomWeight = envValInt
	}
	if envVal, ok := os.LookupEnv("VALUE_GENERATE_RESOURCE_POOL_WEIGHT"); ok && envVal != "" {
		envValInt, err := strconv.Atoi(envVal)
		if err != nil {
			log.Err(err).Msgf("[ParseCmdArgs] Failed to parse int: %s", err)
		}
		GlobalConfig.ValueGenerateResourcePoolWeight = envValInt
	}

	jsonStr, _ := sonic.Marshal(GlobalConfig)
	log.Info().Msgf("[ParseCmdArgs] Parsed arguments: %s", jsonStr)
}
