import json
import sys

# [proposal: build: define standard way to recognize machine-generated files · Issue #13560 · golang/go](https://github.com/golang/go/issues/13560)
DO_NOT_EDIT_HEADER = '// Code generated by arg_config_generate.py. DO NOT EDIT.'


def load_config(config_path):
    with open(config_path) as f:
        return json.load(f)

def to_camel_case(snake_str):
    components = snake_str.split('_')
    for i in range(len(components)):
        if components[i].lower() in ('url', 'id'):
            components[i] = components[i].upper()
        elif components[i].lower() == 'openapi':
            components[i] = 'OpenAPI'
        else:
            components[i] = components[i].title()
    return ''.join(components)

def to_go_type(json_type):
    if json_type == "string":
        return "string"
    elif json_type == "number":
        return "int"
    elif json_type == "duration":
        return "time.Duration"
    else:
        return "string"

def generate_godoc(description):
    return f"// {description}\n"

def generate_arg_parse_code(config):
    arg_parse_imports = """package config

import (
    "flag"
    "github.com/bytedance/sonic"
    "github.com/rs/zerolog/log"
)
"""
    arg_parse_code = DO_NOT_EDIT_HEADER + '\n' + arg_parse_imports + "\nfunc ParseCmdArgs() {\n"
    for arg in config:
        arg_name = arg["arg_name"]
        config_name = arg["config_name"]
        description = arg["description"]
        default_value = arg["default"]
        go_type = to_go_type(arg["type"])

        if go_type == "time.Duration":
            arg_parse_code += f'    flag.DurationVar(&GlobalConfig.{to_camel_case(config_name)}, "{arg_name}", {default_value}, "{description}")\n'
        elif go_type == "int":
            arg_parse_code += f'    flag.IntVar(&GlobalConfig.{to_camel_case(config_name)}, "{arg_name}", {default_value}, "{description}")\n'
        else:
            arg_parse_code += f'    flag.StringVar(&GlobalConfig.{to_camel_case(config_name)}, "{arg_name}", "{default_value}", "{description}")\n'

    arg_parse_code += """
    flag.Parse()

    jsonStr, _ := sonic.Marshal(GlobalConfig)
    log.Info().Msgf("Parsed command line arguments: %s", jsonStr)
}
"""
    return arg_parse_code

def generate_config_code(config):
    config_imports = """package config

import "time"
"""
    config_code = DO_NOT_EDIT_HEADER + '\n' + config_imports + "\nvar GlobalConfig *RuntimeConfig\n\ntype RuntimeConfig struct {\n"
    for arg in config:
        config_name = arg["config_name"]
        description = arg["description"]
        go_type = to_go_type(arg["type"])

        config_code += f'    {generate_godoc(description)}'
        config_code += f'    {to_camel_case(config_name)} {go_type} `json:"{config_name}"`\n'

    init_config = """func InitConfig() {
    GlobalConfig = &RuntimeConfig{}
}
"""
    config_code += "}\n\n" + init_config
    return config_code

def write_to_file(filepath, content):
    with open(filepath, 'w') as f:
        f.write(content)

def main(config_path):
    config_file_path = config_path + '/arg_config.json'
    arg_parse_go_code_path = config_path + '/arg_parse.go'
    config_go_code_path = config_path + '/config.go'
    config = load_config(config_file_path)
    arg_parse_code = generate_arg_parse_code(config)
    config_code = generate_config_code(config)

    write_to_file(arg_parse_go_code_path, arg_parse_code)
    write_to_file(config_go_code_path, config_code)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python arg_config_generate.py path_to_config_dir")
        sys.exit(1)
    main(sys.argv[1])